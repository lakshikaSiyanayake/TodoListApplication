@page "/EditTodoListItems/{id:int}"
@using TodoListApplication.Models
@using Newtonsoft.Json
@using System.Text
@using System.Net.Http.Headers
@using System.Web
<link href="/validation.css" rel="stylesheet" />

<h1 class="bg-info text-white">Edit TodoLists</h1>
<h2 class="text-success p-2">@FormSubmitMessage</h2>

<EditForm Model="TodoListData" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Id</label>
        <ValidationMessage For="@(() => TodoListData.ItemId)" />
        <InputNumber disabled class="form-control" @bind-Value="TodoListData.ItemId" />
    </div>
    <div class="form-group">
        <label>Name</label>
        <ValidationMessage For="@(() => TodoListData.ItemName)" />
        <InputText class="form-control" @bind-Value="TodoListData.ItemName" />
    </div>
    <div class="form-group">
        <label>Start Location</label>
        <ValidationMessage For="@(() => TodoListData.ItemDescription)" />
        <InputText class="form-control" @bind-Value="TodoListData.ItemDescription" />
    </div>
    <div class="form-group">
            <label>Item Status</label>
            <ValidationMessage For="@(() => TodoListData.ItemStatus)" />
            <input type="checkbox"  @bind="TodoListData.ItemStatus">
        </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Click</button>
    </div>
</EditForm>

@if (ReceivedTodoList != null)
{
    <h3 class="text-warning p-2">Todo List</h3>
    <table class="table table-sm table-striped table-bordered m-2">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Start Location</th>
                <th>Item Status</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@ReceivedTodoList.ItemId</td>
                <td>@ReceivedTodoList.ItemName</td>
                <td>@ReceivedTodoList.ItemDescription</td>
                @if (ReceivedTodoList.ItemStatus)
                {
                    <td>Done</td>
                }
                else
                {
                 <td>Not Done</td>
                }

            </tr>
        </tbody>
    </table>
}

@code {
    public ToDoListItem TodoListData;
    public ToDoListItem ReceivedTodoList;

    public string FormSubmitMessage { get; set; } = "TodoList Not Updated";

    [Parameter]
    public int Id { get; set; }

    public async Task HandleValidSubmit()
    {
        ReceivedTodoList = new ToDoListItem();
        using (var httpClient = new HttpClient())
        {
            var requestBody = new ToDoListItem
            {
                ItemId = TodoListData.ItemId,
                ItemName = TodoListData.ItemName,
                ItemDescription = TodoListData.ItemDescription,
                ItemStatus = TodoListData.ItemStatus,
                loggedUser = TodoListData.loggedUser
            };

            string serializedString = System.Text.Json.JsonSerializer.Serialize(requestBody);
            var requestContent = new StringContent(serializedString, Encoding.UTF8, "application/json");


            using (var response = await httpClient.PutAsync("http://localhost:41068/api/ToDoListItems/" + TodoListData.ItemId, requestContent))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                ReceivedTodoList = JsonConvert.DeserializeObject<ToDoListItem>(apiResponse);
            }


        }
        FormSubmitMessage = "TodoListItem Updated";
    }

    protected async override Task OnParametersSetAsync()
    {
        TodoListData = new ToDoListItem();
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync("http://localhost:41068/api/ToDoListItems/" + Id))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                TodoListData = JsonConvert.DeserializeObject<ToDoListItem>(apiResponse);
            }
        }
    }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Reservation";
}
